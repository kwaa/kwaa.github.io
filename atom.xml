<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>./kwaa.dev</title>
  
  <subtitle>AB7575DD-9E94-B917-85CD-000D7FEBEAAE</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kwaa.dev/"/>
  <updated>2020-08-03T15:40:00.000Z</updated>
  <id>https://kwaa.dev/</id>
  
  <author>
    <name>藍</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>体验 WebAssembly 虚拟机 SSVM</title>
    <link href="https://kwaa.dev/p/ssvm-nodejs/"/>
    <id>https://kwaa.dev/p/ssvm-nodejs/</id>
    <published>2020-07-30T14:11:00.000Z</published>
    <updated>2020-08-03T15:40:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>偶然看到<a href="https://www.v2ex.com/t/693807">写 Rust 代码，领树莓派</a><br>这种好事怎么能错过？虽然只能领到 Zero W；我本来就对 Rust 比较感兴趣，这次正好尝试一下。</p><p>先按照<a href="https://www.secondstate.io/articles/get-started-with-rust-functions-in-node-zh/">教程</a>走吧：<br>为了省事我用的 docker，但实际上一点都不省事。<br>ssvm 要求 Ubuntu 20.04，对我服务器装着的纯血 Arch 不太友好。</p><pre class="language-bash" data-language="bash"><code class="language-bash">git clone https:&#x2F;&#x2F;github.com&#x2F;second-state&#x2F;ssvm-nodejs-startercd ssvm-nodejs-starterdocker build -t ssvm-nodejs:v1 . # 需要很长时间，注意docker run -p 3000:3000 --rm -it -v $(pwd):&#x2F;app ssvm-nodejs:v1</code></pre><p>进入开发环境，接下来尝试编译：<br>（cargo build 速度感人，这里我推荐使用 proxychains-ng）</p><pre class="language-bash" data-language="bash"><code class="language-bash">cd &#x2F;appcargo build # 需要很长时间，注意ssvmup build # 我前几次尝试的时候没有执行 cargo package，结果一点反应没有；引以为戒。node node&#x2F;app.js # 编译完就可以运行了</code></pre><p>这是一个 Hello World 示例，跑起来大概这样：</p><p><img src="https://cdn.jsdelivr.net/gh/kwaa/kwaa.github.io/source/_posts/ssvm-nodejs/hello.png" alt="hello"class="mdui-img-rounded" loading="lazy"></p><p>新手教程已经完成了，我也该着手修改了。<br>做点什么呢？Rust 和 WebAssembly 我都是第一次接触。<br>考虑到作为初学者不应该写的太大，这里我选择了 leetcode 的 <a href="https://leetcode.com/problems/generate-a-string-with-characters-that-have-odd-counts/">1374. Generate a String With Characters That Have Odd Counts</a>。</p><p>之后我花了两天尝试用 ajaxForm 提交，不过怎么样都是失败。</p><p><img src="https://cdn.jsdelivr.net/gh/kwaa/kwaa.github.io/source/_posts/ssvm-nodejs/web.png" alt="web"class="mdui-img-rounded" loading="lazy"></p><p>于是就有了现在下面的这个玩意… 反正只说了学习基础知识欸嘿</p><p><strong><a href="http://lib.rs">lib.rs</a>:</strong></p><pre class="language-rust" data-language="rust"><code class="language-rust">use wasm_bindgen::prelude::*;#[wasm_bindgen]pub fn sb(s: &amp;str) -&gt; String &#123;  let l &#x3D; s.parse::&lt;i32&gt;().unwrap();  let r &#x3D; &quot;a&quot;.repeat(l as usize - 1) + if l &amp; 1 !&#x3D; 0 &#123; &quot;a&quot; &#125; else &#123; &quot;b&quot; &#125;;  println!(&quot;The Rust function sb() received &#123;&#125;&quot;, r);  return r;&#125;</code></pre><p><strong>app.js:</strong></p><pre class="language-js" data-language="js"><code class="language-js">const &#123; sb &#125; &#x3D; require(&#39;..&#x2F;pkg&#x2F;ssvm_nodejs_starter_lib.js&#39;);const http &#x3D; require(&#39;http&#39;);const url &#x3D; require(&#39;url&#39;);const hostname &#x3D; &#39;0.0.0.0&#39;;const port &#x3D; 3000;const server &#x3D; http.createServer((req, res) &#x3D;&gt; &#123;  const queryObject &#x3D; url.parse(req.url,true).query;  if (!queryObject[&#39;length&#39;]) &#123;    res.end(&#96;Please use command curl http:&#x2F;&#x2F;$&#123;hostname&#125;:$&#123;port&#125;&#x2F;?length&#x3D;LENGTH \n&#96;);  &#125; else &#123;    res.end(sb(queryObject[&#39;length&#39;]) + &#39;\n&#39;);  &#125;&#125;);server.listen(port, hostname, () &#x3D;&gt; &#123;  console.log(&#96;Server running at http:&#x2F;&#x2F;$&#123;hostname&#125;:$&#123;port&#125;&#x2F;&#96;);&#125;);</code></pre><p>这次试手的源码我放在了 <a href="https://github.com/kwaa/ssvm-nodejs-starter">GitHub</a> 。（然而并没有什么用）</p><blockquote><p>顺便一提，sb 指 stringbuilder</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;偶然看到&lt;a href=&quot;https://www.v2ex.com/t/693807&quot;&gt;写 Rust 代码，领树莓派&lt;/a&gt;&lt;br&gt;
这种好事怎么能错过？虽然只能领到 Zero W；我本来就对 Rust 比较感兴趣，这次正好尝试一下。&lt;/p&gt;
&lt;p&gt;先按照&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="笔记" scheme="https://kwaa.dev/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Rust" scheme="https://kwaa.dev/tags/Rust/"/>
    
      <category term="WebAssembly" scheme="https://kwaa.dev/tags/WebAssembly/"/>
    
      <category term="WASM" scheme="https://kwaa.dev/tags/WASM/"/>
    
      <category term="Node.js" scheme="https://kwaa.dev/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 流水线</title>
    <link href="https://kwaa.dev/p/github-actions-for-hexo/"/>
    <id>https://kwaa.dev/p/github-actions-for-hexo/</id>
    <published>2020-07-28T12:16:00.000Z</published>
    <updated>2020-08-02T23:57:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>既然博客重建了，我也就想顺手更新一下部署脚本；<br>区别是加入了 gulp ，并且更新一波版本号。<br>因为 M Refresh 设计之初就<strong>没有放在本地的 css,js 文件</strong>，所以也不需要 gulp-clean-css 和 gulp-uglify。</p><a id="more"></a><p>安装：</p><pre class="language-bash" data-language="bash"><code class="language-bash">npm i gulp -gnpm i gulp gulp-htmlclean gulp-htmlmin gulp-minify-inline gulp-imagemingulp -v</code></pre><p>在 Hexo 根目录创建 gulpfile.js:</p><pre class="language-js" data-language="js"><code class="language-js">let gulp &#x3D; require(&#39;gulp&#39;);let htmlmin &#x3D; require(&#39;gulp-htmlmin&#39;);let htmlclean &#x3D; require(&#39;gulp-htmlclean&#39;);let minifyInline &#x3D; require(&#39;gulp-minify-inline&#39;);let imagemin &#x3D; require(&#39;gulp-imagemin&#39;);&#x2F;&#x2F; htmlgulp.task(&#39;minify-html&#39;, function() &#123;    return gulp        .src(&#39;.&#x2F;public&#x2F;**&#x2F;*.html&#39;)        .pipe(htmlclean())        .pipe(htmlmin(&#123;            removeComments: true,            minifyJS: true,            minifyCSS: true,            minifyURLs: true,        &#125;))        .pipe(gulp.dest(&#39;.&#x2F;public&#39;))&#125;);&#x2F;&#x2F; inlinegulp.task(&#39;minify-inline&#39;, function() &#123;    return gulp        .src(&#39;.&#x2F;public&#x2F;**&#x2F;*.html&#39;)        .pipe(minifyInline())        .pipe(gulp.dest(&#39;.&#x2F;public&#39;))&#125;);&#x2F;&#x2F; imggulp.task(&#39;minify-img&#39;, function() &#123;    return gulp        .src(&#39;.&#x2F;public&#x2F;p&#x2F;**&#x2F;*.*&#39;)        .pipe(            imagemin([                imagemin.gifsicle(&#123; optimizationLevel: 3 &#125;),                imagemin.mozjpeg(&#123; progressive: true &#125;),                imagemin.optipng(&#123; optimizationLevel: 7 &#125;),                imagemin.svgo(&#123; plugins: [                    &#123;removeViewBox: true&#125;,                    &#123;cleanupIDs: false&#125;                ]&#125;)],                &#123; verbose: true &#125;            )        )        .pipe(gulp.dest(&#39;.&#x2F;public&#x2F;p&#39;))&#125;);&#x2F;&#x2F; taskgulp.task(&#39;default&#39;, gulp.series(    &#39;minify-html&#39;,&#39;minify-inline&#39;,&#39;minify-img&#39;));</code></pre><p>创建 ./.github/workflows 文件夹，并新建 main.yml:</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml">name: Build &amp; Deploy .&#x2F;kwaa.devon:  push:    branches:      - masterjobs:  build-and-deploy:    runs-on: ubuntu-latest    steps:      - name: Checkout        uses: actions&#x2F;checkout@v2      - name: Use Node.js 14.x        uses: actions&#x2F;setup-node@v2-beta        with:          node-version: &#39;14&#39;          check-latest: true      - name: Build        run: npm i -g hexo gulp &amp;&amp; npm install &amp;&amp; hexo generate &amp;&amp; gulp      - name: Deploy        uses: peaceiris&#x2F;actions-gh-pages@v3        with:          github_token: $&#123;&#123; secrets.GH_TOKEN &#125;&#125;          publish_branch: gh-pages          publish_dir: &#x2F;public</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;既然博客重建了，我也就想顺手更新一下部署脚本；&lt;br&gt;
区别是加入了 gulp ，并且更新一波版本号。&lt;br&gt;
因为 M Refresh 设计之初就&lt;strong&gt;没有放在本地的 css,js 文件&lt;/strong&gt;，所以也不需要 gulp-clean-css 和 gulp-uglify。&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://kwaa.dev/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Github Actions" scheme="https://kwaa.dev/tags/Github-Actions/"/>
    
      <category term="Hexo" scheme="https://kwaa.dev/tags/Hexo/"/>
    
      <category term="CI/CD" scheme="https://kwaa.dev/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>Introducting Theme-M</title>
    <link href="https://kwaa.dev/p/theme-m/"/>
    <id>https://kwaa.dev/p/theme-m/</id>
    <published>2020-07-26T15:00:00.000Z</published>
    <updated>2020-08-12T03:19:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>THEME-M 从 2019 年初创建文件夹，于 2020 年 7 月重写。<br>重写后卖相更好+精简依赖项，目前只有 MDUI 必须引用；以至于我的样式补丁直接打在页首。<br>新外观参考了不少主题/网站，这里就不一个个列出来了。<br>我个人属于简洁主义者<s>尽管源码并不简洁</s>，所以只实现了自己需要的功能。<br>jQuery 再见！</p><blockquote><p>我真的不擅长写 EJS/JS，语法臃肿以后再改进吧<s>或者不改进了</s>。</p></blockquote><a id="more"></a><h3 id="项目地址">项目地址</h3><p><a href="https://github.com/kwaa/m">kwaa/m</a></p><h3 id="功能说明">功能说明</h3><h4 id="NPM-安装">NPM 安装</h4><p>Hexo 5.0 之后增加了通过 NPM 安装主题的功能，我也想把主题发布到 NPM 上但这和滚动更新的特点不合，所以还是等一段时间吧。</p><h4 id="自动暗模式">自动暗模式</h4><p>MDUI 自带（我提了个 issue），在主题里卡片和卡片以外是分开设置的（分别为 theme.mdui.layout 和 theme.m.layout，theme.m.layout 未设置时自动使用 theme.mdui.layout 的值）。</p><h4 id="评论">评论</h4><p>只做了 Utterances。</p><h4 id="PJAX">PJAX</h4><p>重写后用的是<a href="https://github.com/MoOx/pjax">MoOx/pjax</a>，不需要 jQuery。<br>没有进度条，因为我觉得淡入淡出效果足够了。</p><h4 id="Lazyload">Lazyload</h4><p>能够 loading=“lazy” 完事，又何必弄那么麻烦？</p><h4 id="TOC">TOC</h4><p>一样没有在初版实现，TOC是我最头疼的功能因为写起来很麻烦。</p><h4 id="语法高亮">语法高亮</h4><p>更新：Hexo 原生支持 Prism.js 了。<br>所以你只需要在博客的 _config.yml 启用 prism，再在载入主题的 _config.yml 自定义 css 即可。</p><h4 id="搜索">搜索</h4><p>自动生成高端大气的 Google 搜索。</p><h3 id="文档">文档</h3><p>不打算写文档。</p><h3 id="版本号">版本号</h3><p>Theme-M 不设版本号，如果你是来自未来的其他使用者，你可以把 git pull 当作滚动更新；<br>需要注意，我随时可能根据自己的喜好调整/删除任何内容。</p><h3 id="许可证">许可证</h3><p>我讨厌GPL的传染性，所以不会用它。<br>MIT？Apache2.0？这些都很好，但我还是想用——<br><a href="http://wtfpl.net">WTFPL(Do What The Fuck You Want To Public License)</a>.</p><p>You just DO WHAT THE FUCK YOU WANT TO!</p><h3 id="样式测试">样式测试</h3><p>以免麻烦，顺手放在这里。</p><pre class="language-none"><code class="language-none">Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&#39;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.</code></pre><pre class="language-rust" data-language="rust"><code class="language-rust">#[derive(Debug)]pub enum State &#123;    Start,    Transient,    Closed,&#125;impl From&lt;&amp;&#39;a str&gt; for State &#123;    fn from(s: &amp;&#39;a str) -&gt; Self &#123;        match s &#123;            &quot;start&quot; &#x3D;&gt; State::Start,            &quot;closed&quot; &#x3D;&gt; State::Closed,            _ &#x3D;&gt; unreachable!(),        &#125;    &#125;&#125;</code></pre><pre class="language-json" data-language="json"><code class="language-json">[  &#123;    &quot;title&quot;: &quot;apples&quot;,    &quot;count&quot;: [12000, 20000],    &quot;description&quot;: &#123;&quot;text&quot;: &quot;...&quot;, &quot;sensitive&quot;: false&#125;  &#125;,  &#123;    &quot;title&quot;: &quot;oranges&quot;,    &quot;count&quot;: [17500, null],    &quot;description&quot;: &#123;&quot;text&quot;: &quot;...&quot;, &quot;sensitive&quot;: false&#125;  &#125;]</code></pre><pre class="language-python" data-language="python"><code class="language-python">@requires_authorizationdef somefunc(param1&#x3D;&#39;&#39;, param2&#x3D;0):    r&#39;&#39;&#39;A docstring&#39;&#39;&#39;    if param1 &gt; param2: # interesting        print &#39;Gre\&#39;ater&#39;    return (param2 - param1 + 1 + 0b10l) or Noneclass SomeClass:    pass&gt;&gt;&gt; message &#x3D; &#39;&#39;&#39;interpreter... prompt&#39;&#39;&#39;</code></pre><pre class="language-html" data-language="html"><code class="language-html">&lt;!DOCTYPE html&gt;&lt;title&gt;Title&lt;&#x2F;title&gt;&lt;style&gt;body &#123;width: 500px;&#125;&lt;&#x2F;style&gt;&lt;script type&#x3D;&quot;application&#x2F;javascript&quot;&gt;  function $init() &#123;return true;&#125;&lt;&#x2F;script&gt;&lt;body&gt;  &lt;p checked class&#x3D;&quot;title&quot; id&#x3D;&#39;title&#39;&gt;Title&lt;&#x2F;p&gt;&lt;&#x2F;body&gt;</code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript">function $initHighlight(block, cls) &#123;  try &#123;    if (cls.search(&#x2F;\bno\-highlight\b&#x2F;) !&#x3D; -1)      return process(block, true, 0x0F) +             &#96; class&#x3D;&quot;$&#123;cls&#125;&quot;&#96;;  &#125; catch (e) &#123;    &#x2F;* handle exception *&#x2F;  &#125;  for (var i &#x3D; 0 &#x2F; 2; i &lt; classes.length; i++) &#123;    if (checkCondition(classes[i]) &#x3D;&#x3D;&#x3D; undefined)      console.log(&#39;undefined&#39;);  &#125;  return (    &lt;div&gt;      &lt;web-component&gt;&#123;block&#125;&lt;&#x2F;web-component&gt;    &lt;&#x2F;div&gt;  )&#125;export $initHighlight;</code></pre><pre class="language-cpp" data-language="cpp"><code class="language-cpp">#include &lt;iostream&gt;int main(int argc, char *argv[]) &#123;  &#x2F;* An annoying &quot;Hello World&quot; example *&#x2F;  for (auto i &#x3D; 0; i &lt; 0xFFFF; i++)    cout &lt;&lt; &quot;Hello, World!&quot; &lt;&lt; endl;  char c &#x3D; &#39;\n&#39;;  unordered_map &lt;string, vector&lt;string&gt; &gt; m;  m[&quot;key&quot;] &#x3D; &quot;\\\\&quot;; &#x2F;&#x2F; this is an error  return -2e3 + 12l;&#125;</code></pre><pre class="language-sql" data-language="sql"><code class="language-sql">CREATE TABLE &quot;topic&quot; (    &quot;id&quot; serial NOT NULL PRIMARY KEY,    &quot;forum_id&quot; integer NOT NULL,    &quot;subject&quot; varchar(255) NOT NULL);ALTER TABLE &quot;topic&quot;ADD CONSTRAINT forum_id FOREIGN KEY (&quot;forum_id&quot;)REFERENCES &quot;forum&quot; (&quot;id&quot;);-- Initialsinsert into &quot;topic&quot; (&quot;forum_id&quot;, &quot;subject&quot;)values (2, &#39;D&#39;&#39;artagnian&#39;);</code></pre><pre class="language-objectivec" data-language="objectivec"><code class="language-objectivec">#import &lt;UIKit&#x2F;UIKit.h&gt;#import &quot;Dependency.h&quot;@protocol WorldDataSource@optional- (NSString*)worldName;@required- (BOOL)allowsToLive;@end@property (nonatomic, readonly) NSString *title;- (IBAction) show;@end</code></pre><pre class="language-java" data-language="java"><code class="language-java">&#x2F;** * @author John Smith &lt;john.smith@example.com&gt;*&#x2F;package l2f.gameserver.model;public abstract class L2Char extends L2Object &#123;  public static final Short ERROR &#x3D; 0x0001;  public void moveTo(int x, int y, int z) &#123;    _ai &#x3D; null;    log(&quot;Should not be called&quot;);    if (1 &gt; 5) &#123; &#x2F;&#x2F; wtf!?      return;    &#125;  &#125;&#125;</code></pre><pre class="language-swift" data-language="swift"><code class="language-swift">import Foundation@objc class Person: Entity &#123;  var name: String!  var age:  Int!  init(name: String, age: Int) &#123;    &#x2F;* &#x2F;* ... *&#x2F; *&#x2F;  &#125;  &#x2F;&#x2F; Return a descriptive string for this person  func description(offset: Int &#x3D; 0) -&gt; String &#123;    return &quot;\(name) is \(age + offset) years old&quot;  &#125;&#125;</code></pre><pre class="language-css" data-language="css"><code class="language-css">@font-face &#123;  font-family: Chunkfive; src: url(&#39;Chunkfive.otf&#39;);&#125;body, .usertext &#123;  color: #F0F0F0; background: #600;  font-family: Chunkfive, sans;&#125;@import url(print.css);@media print &#123;  a[href^&#x3D;http]::after &#123;    content: attr(href)  &#125;&#125;</code></pre><pre class="language-ruby" data-language="ruby"><code class="language-ruby"># The Greeter classclass Greeter  def initialize(name)    @name &#x3D; name.capitalize  end  def salute    puts &quot;Hello #&#123;@name&#125;!&quot;  endendg &#x3D; Greeter.new(&quot;world&quot;)g.salute</code></pre><pre class="language-makefile" data-language="makefile"><code class="language-makefile"># MakefileBUILDDIR      &#x3D; _buildEXTRAS       ?&#x3D; $(BUILDDIR)&#x2F;extras.PHONY: main cleanmain:  @echo &quot;Building main facility...&quot;  build_main $(BUILDDIR)clean:  rm -rf $(BUILDDIR)&#x2F;*</code></pre><pre class="language-go" data-language="go"><code class="language-go">package mainimport &quot;fmt&quot;func main() &#123;    ch :&#x3D; make(chan float64)    ch &lt;- 1.0e10    &#x2F;&#x2F; magic number    x, ok :&#x3D; &lt;- ch    defer fmt.Println(&#96;exitting now\&#96;)    go println(len(&quot;hello world!&quot;))    return&#125;</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">#!&#x2F;bin&#x2F;bash###### CONFIGACCEPTED_HOSTS&#x3D;&quot;&#x2F;root&#x2F;.hag_accepted.conf&quot;BE_VERBOSE&#x3D;falseif [ &quot;$UID&quot; -ne 0 ]then  echo &quot;Superuser rights required&quot;  exit 2figenApacheConf()&#123;  echo -e &quot;# Host $&#123;HOME_DIR&#125;$1&#x2F;$2 :&quot;&#125;</code></pre><pre class="language-ini" data-language="ini"><code class="language-ini">; boilerplate[package]name &#x3D; &quot;some_name&quot;authors &#x3D; [&quot;Author&quot;]description &#x3D; &quot;This is \a description&quot;[[lib]]name &#x3D; $&#123;NAME&#125;default &#x3D; Trueauto &#x3D; nocounter &#x3D; 1_000</code></pre><h1>Heading 1</h1><h2 id="Heading-2">Heading 2</h2><h3 id="Heading-3">Heading 3</h3><h4 id="Heading-4">Heading 4</h4><h5 id="Heading-5">Heading 5</h5><h6 id="Heading-6">Heading 6</h6><hr><h2 id="Paragraph">Paragraph</h2><p>Lorem ipsum dolor sit amet, <a href="">test link</a> consectetur adipiscing elit. <strong>Strong text</strong> pellentesque ligula commodo viverra vehicula. <em>Italic text</em> at ullamcorper enim. Morbi a euismod nibh. <u>Underline text</u> non elit nisl. <s>Deleted text</s> tristique, sem id condimentum tempus, metus lectus venenatis mauris, sit amet semper lorem felis a eros. Fusce egestas nibh at sagittis auctor. Sed ultricies ac arcu quis molestie. Donec dapibus nunc in nibh egestas, vitae volutpat sem iaculis. Curabitur sem tellus, elementum nec quam id, fermentum laoreet mi. Ut mollis ullamcorper turpis, vitae facilisis velit ultricies sit amet. Etiam laoreet dui odio, id tempus justo tincidunt id. Phasellus scelerisque nunc sed nunc ultricies accumsan.</p><p>Interdum et malesuada fames ac ante ipsum primis in faucibus. <code>Sed erat diam</code>, blandit eget felis aliquam, rhoncus varius urna. Donec tellus sapien, sodales eget ante vitae, feugiat ullamcorper urna. Praesent auctor dui vitae dapibus eleifend. Proin viverra mollis neque, ut ullamcorper elit posuere eget.</p><blockquote><p>Praesent diam elit, interdum ut pulvinar placerat, imperdiet at magna.</p></blockquote><p>Maecenas ornare arcu at mi suscipit, non molestie tortor ultrices. Aenean convallis, diam et congue ultricies, erat magna tincidunt orci, pulvinar posuere mi sapien ac magna. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Praesent vitae placerat mauris. Nullam laoreet ante posuere tortor blandit auctor. Sed id ligula volutpat leo consequat placerat. Mauris fermentum dolor sed augue malesuada sollicitudin. Vivamus ultrices nunc felis, quis viverra orci eleifend ut. Donec et quam id urna cursus posuere. Donec elementum scelerisque laoreet.</p><h2 id="List-Types">List Types</h2><h3 id="Definition-List-dl">Definition List (dl)</h3><dl><dt>Definition List Title</dt><dd>This is a definition list division.</dd></dl><h3 id="Ordered-List-ol">Ordered List (ol)</h3><ol><li>List Item 1</li><li>List Item 2</li><li>List Item 3</li></ol><h3 id="Unordered-List-ul">Unordered List (ul)</h3><ul><li>List Item 1</li><li>List Item 2</li><li>List Item 3</li></ul><h3 id="Checkbox-List-ul">Checkbox List (ul)</h3><ul><li>[ ] List Item 1 unchecked</li><li>[x] List Item 2 checked</li><li>[X] List Item 3 checked</li></ul><h2 id="Table">Table</h2><table><thead><tr><th>Table Header 1</th><th>Table Header 2</th><th>Table Header 3</th></tr></thead><tbody><tr><td>Division 1</td><td>Division 2</td><td>Division 3</td></tr><tr><td>Division 1</td><td>Division 2</td><td>Division 3</td></tr><tr><td>Division 1</td><td>Division 2</td><td>Division 3</td></tr></tbody></table><h2 id="Misc-Stuff-abbr-acronym-sub-sup-kbd-etc">Misc Stuff - abbr, acronym, sub, sup, kbd, etc.</h2><p>Lorem <sup>superscript</sup> dolor <sub>subscript</sub> amet, consectetuer adipiscing elit. Nullam dignissim convallis est. Quisque aliquam. <cite>cite</cite>. Nunc iaculis suscipit dui. Nam sit amet sem. Aliquam libero nisi, imperdiet at, tincidunt nec, gravida vehicula, nisl. Praesent mattis, massa quis luctus fermentum, turpis mi volutpat justo, eu volutpat enim diam eget metus. Maecenas ornare tortor. Donec sed tellus eget sapien fringilla nonummy. <acronym title="National Basketball Association">NBA</acronym> Mauris a ante. Suspendisse quam sem, consequat at, commodo vitae, feugiat in, nunc. Morbi imperdiet augue quis tellus.  <abbr title="Avenue">AVE</abbr>. Use <kbd>Crtl</kbd> + <kbd>C</kbd> to stop.</p><div class="video-container"><iframe src="https://www.youtube.com/embed/TIbZDRXM-Tg" frameborder="0" loading="lazy" allowfullscreen></iframe></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;THEME-M 从 2019 年初创建文件夹，于 2020 年 7 月重写。&lt;br&gt;
重写后卖相更好+精简依赖项，目前只有 MDUI 必须引用；以至于我的样式补丁直接打在页首。&lt;br&gt;
新外观参考了不少主题/网站，这里就不一个个列出来了。&lt;br&gt;
我个人属于简洁主义者&lt;s&gt;尽管源码并不简洁&lt;/s&gt;，所以只实现了自己需要的功能。&lt;br&gt;
jQuery 再见！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我真的不擅长写 EJS/JS，语法臃肿以后再改进吧&lt;s&gt;或者不改进了&lt;/s&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="折腾" scheme="https://kwaa.dev/categories/%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="Hexo" scheme="https://kwaa.dev/tags/Hexo/"/>
    
      <category term="Theme-M" scheme="https://kwaa.dev/tags/Theme-M/"/>
    
  </entry>
  
  <entry>
    <title>ID Refresh</title>
    <link href="https://kwaa.dev/p/id-refresh/"/>
    <id>https://kwaa.dev/p/id-refresh/</id>
    <published>2020-07-12T13:41:00.000Z</published>
    <updated>2020-08-11T21:51:38.021Z</updated>
    
    <content type="html"><![CDATA[<p>经过十个月的考虑<s>玩游戏</s>时间，我选出了终结过渡期的新 ID。</p><a id="more"></a><h2 id="AB7575DD-9E94-B917-85CD-000D7FEBEAAE">AB7575DD-9E94-B917-85CD-000D7FEBEAAE</h2><p>有什么比一串 UUID 更独一无二的呢？<br>中间分别是我过渡期间使用的两个 Unicode ID 和 「藍」的 Unicode 编码，前后均来自随机生成。</p><h2 id="星川-藍-ほしかわ-あい-Hoshikawa-AI">星川 藍 / ほしかわ あい / Hoshikawa AI</h2><p>给自己取日文名最重要的是什么？不存在重复。这个名字比较重要：作为（如果）归化日本后的使用名。在归化之前仅作为昵称使用。<br>本来想用和 <a href="https://vndb.org/c35176">天ノ川沙夜</a> 一样的<strong>天ノ川</strong>姓结果发现根本没人用，就选了比较接近的<strong>星川</strong>，<strong>藍</strong>则是一开始就钦定了。</p><h2 id="xb917-kwaa">xb917 &gt; kwaa</h2><p>我最觉得麻烦的还要属这个，短字母的撞名几率太大。<br>网站 ID 可以乱改但域名不能乱改！短即是正义，并且这次我不想加数字了；<br>直接从罗马音 Hoshi<strong>k</strong>a<strong>wa</strong> <strong>A</strong>i 里取四个字母，完毕。</p><h2 id="917-moe-kwaa-dev-kwaa-moe">917.moe &gt; kwaa.dev / kwaa.moe</h2><p>一个域名变两个域名，双份快乐 &amp; 双份价格。好在都不贵… 不属于 Premium Domains。<br>之后博客预计直接使用 kwaa.dev 作为主域名，kwaa.moe 另作它用。</p><h2 id="U-Cor-kwaa-dev">U.Cor &gt; kwaa.dev</h2><p>简单的修改，标题直接变为域名。</p><p>顺便一提，U.Cor 的全称是 Unknown-Corner（未知的小角落），命名来源于 2015 年的我… 2019 年开新博客时没什么好名字，就这么缩短一下用上了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经过十个月的考虑&lt;s&gt;玩游戏&lt;/s&gt;时间，我选出了终结过渡期的新 ID。&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="https://kwaa.dev/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>Project 1ST - 电子分频耳机 DIY 计划</title>
    <link href="https://kwaa.dev/p/project-1st/"/>
    <id>https://kwaa.dev/p/project-1st/</id>
    <published>2020-06-09T21:00:00.000Z</published>
    <updated>2020-06-30T05:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计-2020-01">设计 2020.01 ~</h2><p>对，我在 Project AXE 被击坠的那段时间有了现在你看到这些东西的想法。</p><p>Project 1ST 是由一对六单元耳机头，两条 2.5mm TRRS 对录线和一个普通便携耳放大小的数字信号处理器组成的有源电子分频耳机系统。这个耳机系统不涉及数模转换部分。</p><h3 id="耳机，接口和线材">耳机，接口和线材</h3><p>耳机不内置<strong>普通</strong>的无源分频器，直连2.5mm母座；<br>腔体使用透明光固化树脂公模，具备异形 PCB 面板和金属出音嘴。<br>（PCB 正面焊盘方便焊接，背面阻焊/焊盘图案算是客制项目之一）</p><p>耳机部分我取名为IVX，没有理由。</p><blockquote><p>IEM-IVX「MASTER」6单元 3分频 3导管</p></blockquote><ul><li>38D1XJ007Mi/8a(串联) - 2mm*12mm导音管</li><li>33AJ007i(串联) - 2mm*12mm导音管</li><li>2389D(半线圈串联) - 2mm*12mm导音管</li></ul><p>模拟信号接口使用 2.5mm TRRS 单输入双输出，另外提供一个 3.5mm TRS 输入。电源开关/交叉反馈开关和音量旋钮。</p><p>线材也就是两条编在一起而已，用料暂定 Sommer Cicada 4芯 1.5米。</p><p>大概像是这样：</p><p><img src="https://cdn.jsdelivr.net/gh/kwaa/kwaa.github.io/source/_posts/project-1st/demo.png" alt="demo"class="mdui-img-rounded" loading="lazy"></p><p>2.5mm 插针定义：</p><p><img src="https://cdn.jsdelivr.net/gh/kwaa/kwaa.github.io/source/_posts/project-1st/trrs.png" alt="trrs"class="mdui-img-rounded" loading="lazy"></p><a id="more"></a><h3 id="模拟信号处理器">模拟信号处理器</h3><blockquote><p>ASP-NE0「MIXER」</p></blockquote><p>这套耳机系统的灵魂也是最麻烦的部分，做这个我觉得有必要使用一部分洞洞板。</p><p>交叉反馈、分频点和EQ（如果有）完全根据耳机设计，以实现最佳效果。</p><p>仿照 Orion ASP 画的 Function Block Diagram，随进度更新：</p><p><img src="https://blog.917.moe/p/project-1st/diagram.png" alt="diagram"class="mdui-img-rounded" loading="lazy"></p><h4 id="IB-输入缓冲">IB - 输入缓冲</h4><p>没想好</p><h4 id="VC-音量控制">VC - 音量控制</h4><p>没想好</p><h4 id="XF-交叉反馈">XF - 交叉反馈</h4><p>不太了解，但我想试试！<br>拥有不同的听感不是很棒吗？反正可以手动开关。</p><h4 id="LR-三路分频">LR - 三路分频</h4><p>作为一个 Linkwitz 信徒，我当然会选择四阶 Linkwitz-Riley 滤波器。</p><p>打算耳机原型做好以后用 Equalizer APO，foobar2000 和 <a href="http://xover.sourceforge.net/">foo_dsp_xover</a> 插件先决定好分频点，再根据分频点设计 PCB。</p><p>电路直接搬 TI 参考设计 <a href="http://www.ti.com/lit/ug/tidu035/tidu035.pdf">TIDU035</a>，用 OPA1604 运放。</p><h4 id="AMP-功率放大">AMP - 功率放大</h4><p>耳放部分我给起了一个好听的名字—— Mori 森</p><p>众木成森，它专为多声道/低功耗设计（实际上也是搬的 TI 参考设计，稍作修改）；一片 INA1620 并联接一端输出。</p><p>这次是三分频六声道，所以也就叫 Mori 2X6。</p><p>这个放大器为 1ST 耳机系统专用，所以不需要额外的增益开关。</p><h4 id="POWER-电源">POWER - 电源</h4><p>出于省事，我打算用二或四块 9V 电池供电，并联成 ±9V。<br>这样也不用考虑充电了，简洁万岁！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;设计-2020-01&quot;&gt;设计 2020.01 ~&lt;/h2&gt;
&lt;p&gt;对，我在 Project AXE 被击坠的那段时间有了现在你看到这些东西的想法。&lt;/p&gt;
&lt;p&gt;Project 1ST 是由一对六单元耳机头，两条 2.5mm TRRS 对录线和一个普通便携耳放大小的数字信号处理器组成的有源电子分频耳机系统。这个耳机系统不涉及数模转换部分。&lt;/p&gt;
&lt;h3 id=&quot;耳机，接口和线材&quot;&gt;耳机，接口和线材&lt;/h3&gt;
&lt;p&gt;耳机不内置&lt;strong&gt;普通&lt;/strong&gt;的无源分频器，直连2.5mm母座；&lt;br&gt;
腔体使用透明光固化树脂公模，具备异形 PCB 面板和金属出音嘴。&lt;br&gt;
（PCB 正面焊盘方便焊接，背面阻焊/焊盘图案算是客制项目之一）&lt;/p&gt;
&lt;p&gt;耳机部分我取名为IVX，没有理由。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;IEM-IVX「MASTER」6单元 3分频 3导管&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;38D1XJ007Mi/8a(串联) - 2mm*12mm导音管&lt;/li&gt;
&lt;li&gt;33AJ007i(串联) - 2mm*12mm导音管&lt;/li&gt;
&lt;li&gt;2389D(半线圈串联) - 2mm*12mm导音管&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;模拟信号接口使用 2.5mm TRRS 单输入双输出，另外提供一个 3.5mm TRS 输入。电源开关/交叉反馈开关和音量旋钮。&lt;/p&gt;
&lt;p&gt;线材也就是两条编在一起而已，用料暂定 Sommer Cicada 4芯 1.5米。&lt;/p&gt;
&lt;p&gt;大概像是这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/kwaa/kwaa.github.io/source/_posts/project-1st/demo.png&quot; alt=&quot;demo&quot;&gt;&lt;/p&gt;
&lt;p&gt;2.5mm 插针定义：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/kwaa/kwaa.github.io/source/_posts/project-1st/trrs.png&quot; alt=&quot;trrs&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="音频" scheme="https://kwaa.dev/categories/%E9%9F%B3%E9%A2%91/"/>
    
    
      <category term="DIY" scheme="https://kwaa.dev/tags/DIY/"/>
    
      <category term="IEM" scheme="https://kwaa.dev/tags/IEM/"/>
    
      <category term="入耳式耳机" scheme="https://kwaa.dev/tags/%E5%85%A5%E8%80%B3%E5%BC%8F%E8%80%B3%E6%9C%BA/"/>
    
      <category term="模拟信号处理器" scheme="https://kwaa.dev/tags/%E6%A8%A1%E6%8B%9F%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>白日梦</title>
    <link href="https://kwaa.dev/p/daydream/"/>
    <id>https://kwaa.dev/p/daydream/</id>
    <published>2020-06-07T20:00:00.000Z</published>
    <updated>2020-06-07T20:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>所有人或多或少都有那么些想要又买不起的玩意，而对我来说它们出奇的多。</p><p>当我不想要或者真的买了，它会被划上删除线。</p><a id="more"></a><h2 id="STAX-SR-009S-DIY-MINI-T2">STAX SR-009S + DIY MINI T2</h2><p>当之无愧的耳机顶峰。比起某些卖 111 万甚至 49.8 万的静电耳机（说的就是你，HE1），STAX 不可谓不是静电耳机界的良心。</p><p>耳放方面则是 <a href="https://www.head-case.org/forums/profile/3199-joamat/">JoaMat</a> 的 <a href="https://www.head-case.org/forums/topic/13520-diy-mini-t2-build-thread/">MINI T2</a>，SRM-T2 耳放应该不用我多说了。</p><h2 id="Linkwitz-LX521-4">Linkwitz LX521.4</h2><p>SR009S 在我心里代表耳机的顶峰，而 LX521.4 则是音箱的顶峰。哪怕有很多比它贵的音箱我还是只认它。<s>我们除了他谁都不认</s></p><p>我一直很崇拜 Linkwitz 老爷子，曾经还想做个 LXmini 但平时不太用音箱也就放弃了… 但或许我以后真的会搞一套 LX521.4。</p><h2 id="Valve-Index-3-Vive-Tracker">Valve Index + 3*Vive Tracker</h2><p>谁能拒绝一套 VR 设备呢？特别是当你能自己扮纸片人老婆的时候。</p><p>这玩意是当下最合适的解决方案，对我来说购买欲应该是上面三个里面最强的（废话其他的都几万块）。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;所有人或多或少都有那么些想要又买不起的玩意，而对我来说它们出奇的多。&lt;/p&gt;
&lt;p&gt;当我不想要或者真的买了，它会被划上删除线。&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="https://kwaa.dev/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>入耳式耳机随想</title>
    <link href="https://kwaa.dev/p/iem-idea/"/>
    <id>https://kwaa.dev/p/iem-idea/</id>
    <published>2020-06-07T19:00:00.000Z</published>
    <updated>2020-08-07T22:06:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>我把所有的入耳式耳机想法都放在这里，已经实现或正在实际制作的会单独写一篇文章。</p><a id="more"></a><p>在这里公开的方案（如果有）无论是否制作过我都不为实际效果背书。<br>为什么想法这么多却没几个实际动手的？因为没钱。</p><h2 id="Project-AXE-IEM-AXE「AXE」">Project AXE | IEM-AXE「AXE」</h2><blockquote><p>史诗巨坑，绝赞制作中 2019.07</p></blockquote><p>开始 DIY 耳机的第一步。<a href="https://kwaa.dev/p/project-axe/">Project AXE - 旗舰耳机 DIY 计划</a></p><h2 id="Project-1ST-IEM-IVX「MASTER」">Project 1ST | IEM-IVX「MASTER」</h2><blockquote><p>终极天坑，停留在想法 2020.01</p></blockquote><p>我总是要给自己找麻烦。<a href="https://kwaa.dev/p/project-1st">Project 1ST - 电子分频耳机 DIY 计划</a></p><h2 id="IEM-BA4「BASIS」">IEM-BA4「BASIS」</h2><blockquote><p>即使用的是最烂大街的单元，它依然相当特别</p></blockquote><p>想设计一个成本500以内又方便买材料的四单元耳机，于是就有了这玩意。</p><p>单边由两个串联 CI-22955 和两个串联 ED-29689 组合，组成四单元双分频双导管。</p><p>特别在哪里呢？高低频单元都各有一个是半线圈。</p><p>由于现在没有闲钱，所以暂时不会进行后续设计。</p><blockquote><p>IEM-BA4（早期设计）4单元 2分频 2导管</p></blockquote><ul><li>22955 + 22955(串联, 半线圈) - 串电阻并电容 - 并管绿阻 - 15mm导管/2mmID</li><li>29689 + 29689(串联, 半线圈) - 串电容 - 并管灰阻 - 10mm导管/2mmID</li></ul><h2 id="IEM-UN1「UNIVERSAL」">IEM-UN1「UNIVERSAL」</h2><blockquote><p>由于缺乏乐趣<s>市面上太多同类</s>，此方案已暂停更新。</p></blockquote><p>2354 便宜了不少，很适合设计新的单动铁。作为我眼里最合适的全频单元，或许以后设计 Project 2ND（如果有）的时候也会用到它。</p><p>虽然简单串个电阻（甚至直接焊母座上）就能听，但那不是很没意思吗？（待更新）</p><blockquote><p>IEM-UN1（早期设计）1单元 1分频 1导管</p></blockquote><ul><li>2354 - 串39Ω - 绿阻 - 尽可能短的导管/2mmID</li></ul><h2 id="IEM-BLOOM「BLOOM」">IEM-BLOOM「BLOOM」</h2><blockquote><p>现代日呆耳机</p></blockquote><p>大多数时候我都是只想不做，这玩意大概也是一样。</p><p>BLOOM 的设计需求是 Galgame / Anisong 专精，所以你可以在它身上找到 334 和 CK100 的一些影子。命名和点兔第三季巧合的重复了，不过我本意是 BLOOM (全屏泛光) 后处理；这也算一种歪打正着吧，毕竟将来测试这玩意的时候肯定会用到点兔角色歌 CD。</p><p>低频使用了我喜欢的 38D1XJ007Mi，另设低频衰减开关。中频则为 334 同款 33A007（实际上因为买不到，所以是33AP007改线）。高频使用 30017 和 23991 并联得到中高频 FK 和极高频 WBFK 各两个。30017 和 23991 并联来自 <a href="https://www.head-fi.org/threads/home-made-iems.430688/post-15081696">dhruvmeena96</a> 的想法，借此获得 20Ω FK / 10Ω WBFK 的直流阻抗。</p><p>依然是没钱做不出来，以后再说了。这玩意成本确实高了点，以后我可能会再搞一个三单元低配版。</p><p>虽然 30017 容易搞出相位问题，但我就是想试试。之前无意中翻到了说是改进版的 31082，不过只有两根线就没什么意思了。</p><p>以 2020 年中旬的淘宝价格，BLOOM 八单元版动铁成本约为 1000 元，十二单元版约为 1500 元。</p><blockquote><p>IEM-BLOOM (早期设计) 8单元 4分频 3导管</p></blockquote><ul><li>38D1XJ007Mi/8a(串联) - 没想好 - 并管绿阻 - 15mm导管/2mmID</li><li>33A007(串联) - 串电容(待更新) - 并管绿阻 - 15mm导管/2mmID</li><li>TWFK-23991(和30017并联) - FK串22uF - WBFK串470nF - 灰阻 - 15mm导管/2mmID</li><li>TWFK-30017(和23991并联) - FK串22uF - WBFK串470nF - 白阻 - 10mm导管/2mmID</li></ul><p>还可以堆单元数量，像这样：</p><blockquote><p>IEM-BLOOM（谜之设计）12单元 4分频 3导管</p></blockquote><ul><li>38D1XJ007Mi/8a(串联) - 没想好 - 并管绿阻 - 15mm导管/2mmID</li><li>33A007(串联) - 串电容(待更新) - 并管绿阻 - 15mm导管/2mmID</li><li>TWFK-23991*2(并联, 和30017并联) - FK串22uF - WBFK串470nF - 灰阻 - 15mm导管/2mmID</li><li>TWFK-30017*2(并联, 和23991并联) - FK串22uF - WBFK串470nF - 白阻 - 10mm导管/2mmID</li></ul><h2 id="IEM-MIDORI「翠」">IEM-MIDORI「翠」</h2><blockquote><p>恶意的政治隐喻</p></blockquote><p>上面（IEM-BLOOM）说的三单元低配 HUFI 特化型耳机。第一个汉字命名！<br>为什么叫翠呢？首先是形容它的目标以人声华丽为主；其次是我 2016 年以来一直在祈翠，以这个名字作为一种精神寄托。在这里顺便说一下取名规范吧：</p><table><thead><tr><th>类型</th><th>代号</th><th>命名</th></tr></thead><tbody><tr><td>IEM</td><td>MIDORI</td><td>「翠」</td></tr></tbody></table><p>虽然有很多和代号一样的命名就是了。</p><p>基本思路是延续 CK100 的分频，替换一个更好的低频单元（就是你了，2354！）。原版低频单元 TEC-30033 并没有分频（大概止于 8kHz），这里尝试将 2354 串电阻并电容来压高频。</p><p>或许你会很奇怪为什么我会选 2354，原因是 CK100 的 30033 在 8kHz 以下都有出场（三单元做成低解析也要归功于这个 30033）。30017 的 WBFK 串了个大电容，导致它基本只负责高频。当然这套分频也是我从其他地方看到的，我自己并没有拥有过 CK100 所以真实性未知。说到这里，本来是全频单元且低频较强的 2354 我觉得就很适合登场了；分频先串个 20Ω 电阻，并联电容值等开工再一个个试吧。</p><p>以 2020 年中旬的淘宝价格，MIDORI 动铁成本约为 300 元。由于我手里有一对剩下的 30017（Project AXE 剩下来的），所以只需要搞定外壳再买一对 2354 就可以开工了。</p><p>虽然以 CK100 分频为基础，但我并不想做一个解析强化版 CK100… 主要原因是做不成，毕竟单元都换了。</p><blockquote><p>IEM-MIDORI（早期设计）3单元 3分频 2导管</p></blockquote><ul><li>2354 - 串20Ω - 并电容 - 绿阻 - 10mm导管/2mmID</li><li>TWFK-30017 - FK串22uF - WBFK串0.47uF - 白阻 - 10mm导管/2mmID</li></ul><h2 id="IEM-IRODORI「彩」">IEM-IRODORI「彩」</h2><blockquote><p>这堆方案里完成度最低的</p></blockquote><p>第二个 DORI。这玩意和前几作目的性的设计不同，完全是我脑洞大开的产物。<br>说到彩会想到什么？五彩斑斓。所以这是一个五单元耳机。<br>我以后想试试娄氏的 RDA-32792，于是把它作为中频；低频和高频分别是 32984 + 22955 / 2389 和 E25ST，组成了 5 单元 5 分频的“豪华”阵容。<s>但我并没有能力塞五个导管</s></p><blockquote><p>IEM-IRODORI（早期设计）5单元 5分频 3导管</p></blockquote><ul><li>CI-32984 - 没想好 - 并管黄阻 - 没想好</li><li>CI-22955 - 没想好 - 并管黄阻 - 没想好</li><li>RDA-32792 - 没想好 - 没想好 - 没想好</li><li>2389(半线圈) - 串4.7uF - 并管白阻 - 10mm导管/2mmID</li><li>E25ST - 串470nF - 并管白阻 - 10mm导管/2mmID</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我把所有的入耳式耳机想法都放在这里，已经实现或正在实际制作的会单独写一篇文章。&lt;/p&gt;
    
    </summary>
    
    
      <category term="音频" scheme="https://kwaa.dev/categories/%E9%9F%B3%E9%A2%91/"/>
    
    
      <category term="DIY" scheme="https://kwaa.dev/tags/DIY/"/>
    
      <category term="IEM" scheme="https://kwaa.dev/tags/IEM/"/>
    
      <category term="入耳式耳机" scheme="https://kwaa.dev/tags/%E5%85%A5%E8%80%B3%E5%BC%8F%E8%80%B3%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Project AXE - 旗舰耳机 DIY 计划</title>
    <link href="https://kwaa.dev/p/project-axe/"/>
    <id>https://kwaa.dev/p/project-axe/</id>
    <published>2020-04-07T20:20:00.000Z</published>
    <updated>2020-06-09T23:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，21 世纪的旗舰 IEM 相当昂贵。</p><p>我既想拥有一个旗舰 IEM 又认为市售品比起 STAX SR-009S、Abyss 1266 之类的大耳来说溢价过高，就产生了自己设计一个的想法。</p><a id="more"></a><p>既然是旗舰级，那当然要十单元！静电！<br>(Balanced)Armature, Electrostatic, X(10)；干脆就叫 AXE 好了。</p><p>但是去年的我并不知道，这个玩意会拖了快一年时间还没完成；并且足足让我花了四五千（单元 + 工具）。</p><h2 id="原型-2019-07">原型 2019.07 ~</h2><p>Project AXE 最初方案基本照搬 <a href="https://www.head-fi.org/threads/home-made-iems.430688/post-15070746">dhruvmeena96 的设计</a>，做了一些小修改和额外加了一个 30017 用来实现类似 CK100 的音染。</p><blockquote><p>IEM-AXE (2019年原设计) 10单元 5分频 3导管</p></blockquote><ul><li>38D1XJ007Mi(串联) - L-pad(4.7Ω, 4.7Ω) - 并管黄阻尼(4700)</li><li>33AJ007i(串联) - 串47Ω - 并15uF - 并管黄阻尼(4700)</li><li>2389D(半线圈并联) - 串2.2uF - 棕阻尼(1000)</li><li>EST65DA01(并联) - 串470nF - 并管灰阻尼(320)</li><li>30017 - 中频串2.2uF - 高频串470nF - 并管灰阻尼(320)</li></ul><p>去年的我画不好分频，焊出来声音有问题然后被人咕了。</p><p>之后又摸了半年（直到有钱把工具买齐为止），L-pad 在第一次测试中不可用，我打算修改到一般的低频电阻。</p><p>在这期间某宝也能买到 EST65QB02 了，2020 年的 AXE 设计去掉了 30017 并把静电单元改为 EST65QB02，但我并没有钱买新的静电单元(一个七百多呢) 原型只好继续用 EST65DA01，也就是八单元。</p><blockquote><p>IEM-AXE (2020年初设计) 10单元 4分频 2导管</p></blockquote><ul><li>38D1XJ007Mi(串联) - 串20Ω - 并管黄阻尼(4700)</li><li>33AJ007i(串联) - 并管黄阻尼(4700)</li><li>2389D(半线圈并联) - 串2.2uF - 并管棕阻尼(1000)</li><li>EST65QB02(并联) - 串470nF - 并管棕阻尼(1000)</li></ul><h2 id="新生-2020-05">新生 2020.05 ~</h2><p>果然还是放弃不了 L-pad！自己再做一次试试看吧！</p><p>我首先重新设计了分频，之后需要制作分频板，修复单元和装壳。</p><blockquote><p>IEM-AXE (2020年中设计) 10单元 4分频 3导管</p></blockquote><ul><li>38D1XJ007Mi(串联) - L-pad(4.7Ω, 4.7Ω) - 并管黄阻尼(4700)</li><li>33AJ007i(串联) - 串47Ω - 并15uF - 并管黄阻尼(4700)</li><li>2389D(半线圈并联) - (?) - ?阻尼(?)</li><li>EST65QB02(并联) - (?) - 灰阻尼(320)</li></ul><p>高频分频我打算重新配置，所以以问号标记；中低频部分沿用 2019 年的设计。</p><p>EST65QB02 只需要串联电容即可，2389D我打算压一下极高频部分以免喧宾夺主。这整个设计最贵的部分就是静电单元，我可不想加和不加没什么区别；所以可能需要串联部分。</p><p>AXE 的分频版算是我第一个原创 PCB 设计，线路也比较简单。原理图：</p><p><img src="https://cdn.jsdelivr.net/gh/kwaa/kwaa.github.io/source/_posts/project-axe/schematic.png" alt="SCHEMATIC"class="mdui-img-rounded" loading="lazy"></p><p>电容/电阻焊盘使用了 0805 规格，一共七个。目前我还没有完成 PCB 设计，先做一些耳机练手再继续吧。</p><p>UPDATE: 无论如何，我打算先把原本的八单元方案做出来自用。</p><h2 id="膨胀">膨胀</h2><p>旗舰 IEM 怎么能没有调音开关？这也是我之后要做的事。</p><p>想了想 AXE 这规格也只适合做低频调节，所以我将不同的版本命名为：</p><ul><li>BASS-LIGHT (IEM-AXE-BL, 参考 <a href="https://github.com/jaakkopasanen/AutoEq/blob/master/compensation/harman_in-ear_2019v2_wo_bass.png">Harman IE Target 2019 without bass</a>)</li><li>BASS-HEAVY (IEM-AXE-BH, 参考 <a href="https://github.com/jaakkopasanen/AutoEq/blob/master/compensation/harman_in-ear_2019v2.png">Harman IE Target 2019</a>)</li><li>BASS-SWITCH (IEM-AXE-BS, 可切换)。</li></ul><h2 id="外观">外观</h2><p>面板打算使用某宝买的银箔碎碳板，原本貌似是刀柄料。<br>太好看了！</p><p><img src="https://cdn.jsdelivr.net/gh/kwaa/kwaa.github.io/source/_posts/project-axe/carbon.jpg" alt="CARBON"class="mdui-img-rounded" loading="lazy"></p><h2 id="总结">总结</h2><p>还没做完怎么就总结了呢？总之我想到什么说什么了。</p><ul><li>首先，找人帮忙的时候绝对要做好被咕的准备。</li><li>其次，直接挑战旗舰是不明智的。</li></ul><p>最后是我为了这个计划买的工具：</p><ul><li>万用表 优利德UT61E ￥270</li><li>电烙铁 二手晨美数显T12焊台 ￥150</li><li>人工耳 小黑IEC711仿真耳 带底座精密版本+声卡 ￥1000</li><li>固化灯 36W镇流器版加强灯+四支LED套装 ￥270</li><li>打磨机 世新204+102L ￥250</li></ul><p>工具两千左右，单元和其他材料大概有三千。</p><p>惨痛的教训：没钱就不要烧耳机了！但我买都买了，也只好含着泪做完。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;众所周知，21 世纪的旗舰 IEM 相当昂贵。&lt;/p&gt;
&lt;p&gt;我既想拥有一个旗舰 IEM 又认为市售品比起 STAX SR-009S、Abyss 1266 之类的大耳来说溢价过高，就产生了自己设计一个的想法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="音频" scheme="https://kwaa.dev/categories/%E9%9F%B3%E9%A2%91/"/>
    
    
      <category term="DIY" scheme="https://kwaa.dev/tags/DIY/"/>
    
      <category term="IEM" scheme="https://kwaa.dev/tags/IEM/"/>
    
      <category term="入耳式耳机" scheme="https://kwaa.dev/tags/%E5%85%A5%E8%80%B3%E5%BC%8F%E8%80%B3%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>S3RVER - 使用 Arch Linux 的 ALL-IN-ONE 服务器</title>
    <link href="https://kwaa.dev/p/s3rver/"/>
    <id>https://kwaa.dev/p/s3rver/</id>
    <published>2020-02-02T20:20:00.000Z</published>
    <updated>2020-02-23T10:10:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>新的一年我终于有预算在家里摆一小只服务器了。</p><a id="more"></a><p>继 1OCALHOST(平板/笔记本) 和 COMPUTE2(台式机) 后，这是我现有的第三个机器；就叫它S3RVER吧。</p><h2 id="需求和配置选择">需求和配置选择</h2><p>我全都要！不太贵，低功耗，小巧；高性能（相对NAS常用的赛扬奔腾来说）。<br>最后选择了R5-2400GE：这是R5-2400G的低功耗版，只有35W TDP。<s>AMD yes</s></p><table><thead><tr><th>合计</th><th>2440</th></tr></thead><tbody><tr><td>二手 R5-2400GE 准系统</td><td>1300</td></tr><tr><td>镁光 16G DDR4-3200 内存条</td><td>420</td></tr><tr><td>三星 256G PM981a 固态盘</td><td>300</td></tr><tr><td>西数 2T WD20SPZX 机械盘</td><td>420</td></tr></tbody></table><h2 id="系统安装">系统安装</h2><p>我最喜欢的 Arch，装了好几次已经轻车熟路了。<br>之前用的都是 EXT4，这次试一试 btrfs</p><table><thead><tr><th>分区方案</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>/dev/nvme0n1p1</td><td>512M</td><td>/boot</td><td>fat32</td></tr><tr><td>/dev/nvme0n1p2</td><td>238G</td><td>/</td><td>btrfs</td></tr><tr><td>/dev/sda1</td><td>1.8T</td><td>/home</td><td>btrfs</td></tr></tbody></table><p>用cfdisk分区，然后格式化并创建子卷：</p><pre class="language-bash" data-language="bash"><code class="language-bash">mkfs.fat -F32 &#x2F;dev&#x2F;nvme0n1p1mkfs.btrfs -f &#x2F;dev&#x2F;nvme0n1p2mkfs.btrfs -f &#x2F;dev&#x2F;sda1mount &#x2F;dev&#x2F;nvme0n1p2 &#x2F;mntcd &#x2F;mntbtrfs subvol create rootfsmkdir -p &#x2F;mnt&#x2F;homemount &#x2F;dev&#x2F;sda1 &#x2F;mnt&#x2F;homecd &#x2F;mnt&#x2F;homebtrfs subvol create homefs</code></pre><p>接下来挂载子卷：</p><pre class="language-bash" data-language="bash"><code class="language-bash">cd ~umount &#x2F;dev&#x2F;sda1umount &#x2F;dev&#x2F;nvme0n1p2mount &#x2F;dev&#x2F;nvme0n1p2 &#x2F;mnt -o subvol&#x3D;rootfs,compress&#x3D;lzo,noatime,discard,ssd,space_cachemkdir -p &#x2F;mnt&#x2F;homemount &#x2F;dev&#x2F;sda1 &#x2F;mnt&#x2F;home -o subvol&#x3D;homefs,compress-force&#x3D;lzo,noatime,autodefrag,space_cachemkdir -p &#x2F;mnt&#x2F;bootmount &#x2F;dev&#x2F;nvme0n1p1 &#x2F;mnt&#x2F;boot</code></pre><p>修改mirrorlist，安装系统和生成fstab：</p><pre class="language-bash" data-language="bash"><code class="language-bash">nano &#x2F;etc&#x2F;pacman.d&#x2F;mirrorlist #我就是喜欢用nanopacman -Syypacman -S archlinux-keyringpacstrap -i &#x2F;mnt base base-devel linux linux-firmwaregenfstab -U &#x2F;mnt &gt;&gt; &#x2F;mnt&#x2F;etc&#x2F;fstabcat &#x2F;mnt&#x2F;etc&#x2F;fstab</code></pre><p>用arch-chroot进入安装好的系统，安装grub：</p><pre class="language-bash" data-language="bash"><code class="language-bash">pacman -S dosfstools grub efibootmgrgrub-install --target&#x3D;x86_64-efi --efi-directory&#x3D;&#x2F;boot --bootloader-id&#x3D;arch --recheckgrub-mkconfig -o &#x2F;boot&#x2F;grub&#x2F;grub.cfg</code></pre><p>安装部分就告一段落了，装个neofetch作为尾声。</p><pre class="language-bash" data-language="bash"><code class="language-bash">pacman -S neofetchneofetch</code></pre><h2 id="其他配置">其他配置</h2><pre class="language-bash" data-language="bash"><code class="language-bash">pacman -S ufw fail2ban #防火墙pacman -S zsh grml-zsh-config #zsh&amp;配置useradd -m -g wheel -s zsh b917 #添加用户passwd b917 #设置用户密码</code></pre><h3 id="AUR-助手">AUR 助手</h3><p>说到 Arch 的优点，当然少不了 AUR；<br>这里我选择了自己常用的yay。</p><pre class="language-bash" data-language="bash"><code class="language-bash">cd &#x2F;tmpgit clone https:&#x2F;&#x2F;aur.archlinux.org&#x2F;yay.gitcd yaymakepkg -si</code></pre><h3 id="proxychains-ng">proxychains-ng</h3><p>活在墙国，免不了要使用代理：我直接设置成台式机的 v2ray SOCKS 端口。</p><pre class="language-bash" data-language="bash"><code class="language-bash">pacman -S proxychains-ngnano &#x2F;etc&#x2F;proxychains.conf</code></pre><h3 id="Docker-Portainer">Docker&amp;Portainer</h3><p>这次的核心就是 Docker，我会把大多数服务都放进 Docker里运行。Portainer 是 Docker 的图形化管理界面，我用官方文档的方式安装 Portainer，并修改为44301端口。</p><pre class="language-bash" data-language="bash"><code class="language-bash">pacman -S dockersystemctl start dockersystemctl enable dockerdocker pull portainer&#x2F;portainerdocker volume create portainer_datadocker run -d -p 44300:8000 -p 44301:9000 --name&#x3D;portainer --restart&#x3D;always -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock -v portainer_data:&#x2F;data portainer&#x2F;portainer</code></pre><h2 id="安装在系统的服务">安装在系统的服务</h2><h3 id="Samba">Samba</h3><blockquote><p>Samba 是 SMB/CIFS 网络协议的重新实现，可以在 Linux 和 Windows 系统间进行文件，打印机共享。</p></blockquote><p>Samba 我用来做什么？当然是放 Steam 游戏！自己电脑的1T机械盘已经快满了。我设置为分享 /home 目录，也就是整个 WD20SPZX。</p><pre class="language-bash" data-language="bash"><code class="language-bash">pacman -S samba #安装 Sambanano &#x2F;etc&#x2F;samba&#x2F;smb.conf #配置 smb.confsmbpasswd -a b917 #创建用户systmctl start smb nmb #启动服务systemctl enable smb nmb #激活开机自启</code></pre><p>我的 smb.conf 配置：</p><pre class="language-ini" data-language="ini"><code class="language-ini">[global]    workgroup &#x3D; WORKGROUP    server string &#x3D; S3RVER Samba %v    netbios name &#x3D; S3RVER    log file &#x3D; &#x2F;var&#x2F;log&#x2F;samba&#x2F;%m.log    log level &#x3D; 3    max log size &#x3D; 50    security &#x3D; user    passdb backend &#x3D; tdbsam[home]    comment &#x3D; Linux home    path &#x3D; &#x2F;home    public &#x3D; yes    writable &#x3D; yes    printable &#x3D; no    valid users &#x3D; b917</code></pre><h2 id="安装在-Docker-的服务">安装在 Docker 的服务</h2><h3 id="joshava-cloudflare-ddns">joshava/cloudflare-ddns</h3><p>本来路由器一直挂着 <a href="http://No-IP.com">No-IP.com</a> 的 DDNS，不过域名实在不怎么好看。正好现在有一台 24 小时开机的设备了，就试试 Cloudflare DDNS。</p><p>使用之前要先在 Cloudflare - My Profile - API Tokens 创建一个新的 Token，点击 Start with a template 后选择 Edit zone DNS 并设置域名即可。</p><pre class="language-bash" data-language="bash"><code class="language-bash">docker pull joshava&#x2F;cloudflare-ddnstouch &#x2F;home&#x2F;b917&#x2F;ddns-config.yaml #创建配置文件nano &#x2F;home&#x2F;b917&#x2F;ddns-config.yaml #编辑配置文件docker run -d -v &#x2F;home&#x2F;b917&#x2F;ddns-config.yaml:&#x2F;app&#x2F;config.yaml hoshava&#x2F;cloudflare-ddns</code></pre><p>config.yaml的示例：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml">auth:    scopedToken: token-input-heredomains:  - name: foo.example.com    type: A    proxied: false    create: true    zoneId: zoneid-input-here</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新的一年我终于有预算在家里摆一小只服务器了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="折腾" scheme="https://kwaa.dev/categories/%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="Arch Linux" scheme="https://kwaa.dev/tags/Arch-Linux/"/>
    
      <category term="服务器" scheme="https://kwaa.dev/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>非常简单的Oracle对象存储代理</title>
    <link href="https://kwaa.dev/p/object-storage-workers/"/>
    <id>https://kwaa.dev/p/object-storage-workers/</id>
    <published>2019-11-05T10:10:00.000Z</published>
    <updated>2019-11-05T10:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>目前可以自定域名和省略path，后续打算加入防盗链和自定HTTP头功能。</p><a id="more"></a><p>食用方式：复制下面全部代码丢到Workers里，并修改参数</p><pre class="language-js" data-language="js"><code class="language-js">addEventListener(&quot;fetch&quot;, event &#x3D;&gt; &#123;    const host &#x3D; &#39;objectstorage.ap-seoul-1.oraclecloud.com&#39;; &#x2F;* 对象存储的hostname *&#x2F;    const path &#x3D; &#39;&#x2F;n&#x2F;xxxxxxxxxxxx&#x2F;b&#x2F;standard&#x2F;o&#x2F;&#39;; &#x2F;* 对象存储的pathname *&#x2F;    let url &#x3D; new URL(event.request.url);    url.hostname &#x3D; host;    if(!url.pathname.startsWith(path))&#123;        if(url.pathname &#x3D;&#x3D; &#39;&#x2F;&#39;)&#123;            return new Response(&#123; status: 403 &#125;)        &#125;else&#123;            url.pathname &#x3D; path + url.pathname;        &#125;    &#125;    let request &#x3D; new Request(url, event.request);    event.respondWith(        fetch(request, &#123;            headers: &#123;                &#39;Access-Control-Allow-Origin&#39;: &#39;*&#39;,            &#125;        &#125;)    );&#125;);</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前可以自定域名和省略path，后续打算加入防盗链和自定HTTP头功能。&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://kwaa.dev/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="对象存储" scheme="https://kwaa.dev/tags/%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/"/>
    
      <category term="Oracle Cloud" scheme="https://kwaa.dev/tags/Oracle-Cloud/"/>
    
  </entry>
  
</feed>
